<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\NanoVM\NanoVM.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\NanoVM\NanoVM.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 894]: Last Updated: Wed Oct 31 18:11:52 2012
<BR><P>
<H3>Maximum Stack Usage =        448 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; nvmfile_call_main &rArr; vm_run &rArr; native_invoke &rArr; native_math_invoke &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1d]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[20]">CAN1_RX1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[21]">CAN1_SCE_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1e]">CAN1_TX_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4c]">CAN2_RX1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4d]">CAN2_SCE_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4a]">CAN2_TX_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5a]">CRYP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[59]">DCMI_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3a]">DMA1_Stream7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[47]">DMA2_Stream4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[48]">ETH_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[49]">ETH_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[11]">EXTI0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[33]">EXTI15_10_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[12]">EXTI1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[13]">EXTI2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[14]">EXTI3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[15]">EXTI4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[22]">EXTI9_5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5c]">FPU_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3b]">FSMC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5b]">HASH_RNG_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2b]">I2C1_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2a]">I2C1_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2d]">I2C2_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2c]">I2C2_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[54]">I2C3_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[53]">I2C3_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4e]">OTG_FS_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[35]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[58]">OTG_HS_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[c]">PVD_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[10]">RCC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[34]">RTC_Alarm_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[e]">RTC_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3c]">SDIO_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2f]">SPI2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3e]">SPI3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5e]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f4xx.o(.text)
 <LI><a href="#[d]">TAMP_STAMP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[23]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[26]">TIM1_CC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[25]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[24]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[27]">TIM2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[28]">TIM3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[29]">TIM4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3d]">TIM5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[41]">TIM6_DAC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[42]">TIM7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[36]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[39]">TIM8_CC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[38]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[37]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3f]">UART4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[40]">UART5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[30]">USART1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[32]">USART3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[52]">USART6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5f]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f4xx.o(.text)
 <LI><a href="#[5d]">main</a> from nanovm.o(i.main) referenced from entry8.o(.ARM.Collect$$$$00000009)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5f]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(.text)
</UL>
<P><STRONG><a name="[141]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[60]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[71]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[142]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[143]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8.o(.ARM.Collect$$$$00000009))

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[121]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_math_invoke
</UL>

<P><STRONG><a name="[144]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_read
</UL>

<P><STRONG><a name="[145]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__aeabi_dadd</STRONG> (Thumb, 320 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_dmul</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[11e]"></a>__aeabi_f2d</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_math_invoke
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_math_invoke
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[147]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[148]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[149]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[14b]"></a>_float_epilogue</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[65]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[9c]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[14c]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[91]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[61]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[14d]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[14e]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>__decompress1</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[a5]"></a>ADC_CommonInit</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, adc.o(i.ADC_CommonInit))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[73]"></a>ADC_Conversion_Data</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, adc.o(i.ADC_Conversion_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Conversion_Data &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
</UL>

<P><STRONG><a name="[76]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, adc.o(i.ADC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Conversion_Data
</UL>

<P><STRONG><a name="[a6]"></a>ADC_Init</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[74]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Conversion_Data
</UL>

<P><STRONG><a name="[75]"></a>ADC_SoftwareStartConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adc.o(i.ADC_SoftwareStartConv))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Conversion_Data
</UL>

<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_COMInit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_pwm_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_pwm_init
</UL>

<P><STRONG><a name="[7a]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_COMInit
</UL>

<P><STRONG><a name="[d7]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_pwm_generate
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_pwm_generate
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_release
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_pwm_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_pwm_init
</UL>

<P><STRONG><a name="[d8]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_pwm_generate
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_pwm_generate
</UL>

<P><STRONG><a name="[138]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_COMInit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_pwm_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_pwm_init
</UL>

<P><STRONG><a name="[79]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_COMInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
</UL>

<P><STRONG><a name="[a4]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[84]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 206 bytes, Stack size 20 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[77]"></a>STM_EVAL_COMInit</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, uart.o(i.STM_EVAL_COMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = STM_EVAL_COMInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[ee]"></a>STM_EVAL_LEDOn</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4_discovery.o(i.STM_EVAL_LEDOn))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_leds_invoke
</UL>

<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; servo_pwm_generate
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_pwm_generate
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_pwm_generate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(.text)
</UL>
<P><STRONG><a name="[83]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pwm.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
</UL>

<P><STRONG><a name="[81]"></a>TIM_Config</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, native_clock.o(i.TIM_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_clock_init
</UL>

<P><STRONG><a name="[82]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, pwm.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
</UL>

<P><STRONG><a name="[7d]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_COMInit
</UL>

<P><STRONG><a name="[139]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc
</UL>

<P><STRONG><a name="[7c]"></a>USART_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_COMInit
</UL>

<P><STRONG><a name="[13a]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc
</UL>

<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[85]"></a>__hardfp_acos</STRONG> (Thumb, 738 bytes, Stack size 80 bytes, acos.o(i.__hardfp_acos))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __hardfp_acos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_math_invoke
</UL>

<P><STRONG><a name="[89]"></a>__hardfp_asin</STRONG> (Thumb, 774 bytes, Stack size 88 bytes, asin.o(i.__hardfp_asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __hardfp_asin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_math_invoke
</UL>

<P><STRONG><a name="[8d]"></a>__hardfp_atan</STRONG> (Thumb, 636 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_math_invoke
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[8e]"></a>__hardfp_atan2</STRONG> (Thumb, 422 bytes, Stack size 48 bytes, atan2.o(i.__hardfp_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_math_invoke
</UL>

<P><STRONG><a name="[90]"></a>__hardfp_ceil</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, ceil.o(i.__hardfp_ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __hardfp_ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_math_invoke
</UL>

<P><STRONG><a name="[92]"></a>__hardfp_cos</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_math_invoke
</UL>

<P><STRONG><a name="[96]"></a>__hardfp_exp</STRONG> (Thumb, 726 bytes, Stack size 72 bytes, exp.o(i.__hardfp_exp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_exp &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_math_invoke
</UL>

<P><STRONG><a name="[11f]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_math_invoke
</UL>

<P><STRONG><a name="[98]"></a>__hardfp_floor</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, floor.o(i.__hardfp_floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_math_invoke
</UL>

<P><STRONG><a name="[99]"></a>__hardfp_log</STRONG> (Thumb, 888 bytes, Stack size 88 bytes, log.o(i.__hardfp_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_math_invoke
</UL>

<P><STRONG><a name="[9b]"></a>__hardfp_pow</STRONG> (Thumb, 3148 bytes, Stack size 184 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_math_invoke
</UL>

<P><STRONG><a name="[9d]"></a>__hardfp_sin</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, sin.o(i.__hardfp_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_math_invoke
</UL>

<P><STRONG><a name="[9e]"></a>__hardfp_sqrt</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_math_invoke
</UL>

<P><STRONG><a name="[9f]"></a>__hardfp_tan</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, tan.o(i.__hardfp_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = __hardfp_tan &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_math_invoke
</UL>

<P><STRONG><a name="[93]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 962 bytes, Stack size 168 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>

<P><STRONG><a name="[95]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>

<P><STRONG><a name="[87]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[94]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>

<P><STRONG><a name="[a0]"></a>__kernel_tan</STRONG> (Thumb, 772 bytes, Stack size 128 bytes, tan_i.o(i.__kernel_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __kernel_tan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
</UL>

<P><STRONG><a name="[8b]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[150]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[151]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[152]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[86]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[a1]"></a>_delay_ms</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, delay.o(i._delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clear
</UL>

<P><STRONG><a name="[a2]"></a>_delay_us</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, delay.o(i._delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_cursor
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_ms
</UL>

<P><STRONG><a name="[a3]"></a>adc_init</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, adc.o(i.adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = adc_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_init
</UL>

<P><STRONG><a name="[a8]"></a>adc_read</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, adc.o(i.adc_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = adc_read &rArr; ADC_Conversion_Data &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Conversion_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_linedetector_invoke
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_ldrsensor_invoke
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_edgedetector_invoke
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_distsensor_invoke
</UL>

<P><STRONG><a name="[a9]"></a>array_baload</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, array.o(i.array_baload))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = array_baload &rArr; heap_get_addr &rArr; heap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_get_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_run
</UL>

<P><STRONG><a name="[ab]"></a>array_bastore</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, array.o(i.array_bastore))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = array_bastore &rArr; heap_get_addr &rArr; heap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_get_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_run
</UL>

<P><STRONG><a name="[ac]"></a>array_faload</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, array.o(i.array_faload))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = array_faload &rArr; heap_get_addr &rArr; heap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_get_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_run
</UL>

<P><STRONG><a name="[ad]"></a>array_fastore</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, array.o(i.array_fastore))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = array_fastore &rArr; heap_get_addr &rArr; heap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_get_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_run
</UL>

<P><STRONG><a name="[ae]"></a>array_iaload</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, array.o(i.array_iaload))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = array_iaload &rArr; heap_get_addr &rArr; heap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_get_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_run
</UL>

<P><STRONG><a name="[af]"></a>array_iastore</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, array.o(i.array_iastore))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = array_iastore &rArr; heap_get_addr &rArr; heap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_get_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_run
</UL>

<P><STRONG><a name="[b0]"></a>array_length</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, array.o(i.array_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = array_length &rArr; heap_get_len &rArr; heap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_get_len
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_get_addr
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;array_typelen
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_run
</UL>

<P><STRONG><a name="[b3]"></a>array_new</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, array.o(i.array_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = array_new &rArr; heap_alloc &rArr; heap_garbage_collect &rArr; stack_heap_id_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_get_addr
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_alloc
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;array_typelen
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_run
</UL>

<P><STRONG><a name="[b2]"></a>array_typelen</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, array.o(i.array_typelen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = array_typelen &rArr; error &rArr; uart_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;array_new
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;array_length
</UL>

<P><STRONG><a name="[8f]"></a>atan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[e0]"></a>delay_ms</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, native_clock.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_clock_invoke
</UL>

<P><STRONG><a name="[d5]"></a>delay_us</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, native_clock.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maus_sens_write
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maus_sens_read
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_clock_invoke
</UL>

<P><STRONG><a name="[b6]"></a>display_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, display.o(i.display_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = display_clear &rArr; _delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_cmd
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_display_invoke
</UL>

<P><STRONG><a name="[b7]"></a>display_cmd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, display.o(i.display_cmd))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_cursor
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clear
</UL>

<P><STRONG><a name="[b8]"></a>display_cursor</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, display.o(i.display_cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = display_cursor
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_cmd
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_display_invoke
</UL>

<P><STRONG><a name="[e4]"></a>display_data</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, display.o(i.display_data))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_display_invoke
</UL>

<P><STRONG><a name="[b5]"></a>error</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, error.o(i.error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = error &rArr; uart_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_java_lang_stringbuffer_invoke
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_java_io_printstream_invoke
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_java_io_inputstream_invoke
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_math_invoke
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_formatter_invoke
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_unsteal
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_steal
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_realloc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_garbage_collect
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_get_len
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_get_addr
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_alloc
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;array_typelen
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_new
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_invoke
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_get_addr
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_run
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_mouse_invoke
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_java_lang_object_invoke
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_display_invoke
</UL>

<P><STRONG><a name="[8c]"></a>fabs</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[ba]"></a>format_bool</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, native_formatter.o(i.format_bool))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = format_bool &rArr; native_strcpy &rArr; nvmfile_read08
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_formatter_invoke
</UL>

<P><STRONG><a name="[bc]"></a>format_float</STRONG> (Thumb, 684 bytes, Stack size 68 bytes, native_formatter.o(i.format_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = format_float &rArr; inttostr
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inttostr
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_formatter_invoke
</UL>

<P><STRONG><a name="[be]"></a>format_int</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, native_formatter.o(i.format_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = format_int &rArr; inttostr
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inttostr
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_formatter_invoke
</UL>

<P><STRONG><a name="[b4]"></a>heap_alloc</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, heap.o(i.heap_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = heap_alloc &rArr; heap_garbage_collect &rArr; stack_heap_id_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_new_id
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_garbage_collect
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_alloc_internal
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_java_lang_stringbuffer_invoke
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_formatter_invoke
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;array_new
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_new
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_new
</UL>

<P><STRONG><a name="[c0]"></a>heap_alloc_internal</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, heap.o(i.heap_alloc_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = heap_alloc_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_realloc
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_alloc
</UL>

<P><STRONG><a name="[c3]"></a>heap_fieldref</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, heap.o(i.heap_fieldref))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = heap_fieldref
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_garbage_collect
</UL>

<P><STRONG><a name="[c1]"></a>heap_garbage_collect</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, heap.o(i.heap_garbage_collect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = heap_garbage_collect &rArr; stack_heap_id_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_heap_id_in_use
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_memcpy_up
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_fieldref
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_steal
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_realloc
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_alloc
</UL>

<P><STRONG><a name="[aa]"></a>heap_get_addr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, heap.o(i.heap_get_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = heap_get_addr &rArr; heap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_search
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_java_lang_stringbuffer_invoke
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_formatter_invoke
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;array_new
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;array_length
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;array_iastore
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;array_iaload
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;array_fastore
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;array_faload
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;array_bastore
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;array_baload
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_new
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_get_addr
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_run
</UL>

<P><STRONG><a name="[132]"></a>heap_get_base</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, heap.o(i.heap_get_base))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_init
</UL>

<P><STRONG><a name="[b1]"></a>heap_get_len</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, heap.o(i.heap_get_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = heap_get_len &rArr; heap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_search
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;array_length
</UL>

<P><STRONG><a name="[13b]"></a>heap_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, heap.o(i.heap_init))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_init
</UL>

<P><STRONG><a name="[c4]"></a>heap_memcpy_up</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, heap.o(i.heap_memcpy_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = heap_memcpy_up
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_garbage_collect
</UL>

<P><STRONG><a name="[bf]"></a>heap_new_id</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, heap.o(i.heap_new_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = heap_new_id &rArr; heap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_search
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_alloc
</UL>

<P><STRONG><a name="[c6]"></a>heap_realloc</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, heap.o(i.heap_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = heap_realloc &rArr; heap_garbage_collect &rArr; stack_heap_id_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_memcpy
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_search
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_garbage_collect
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_alloc_internal
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_java_lang_stringbuffer_invoke
</UL>

<P><STRONG><a name="[c5]"></a>heap_search</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, heap.o(i.heap_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = heap_search
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_realloc
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_new_id
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_get_len
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_get_addr
</UL>

<P><STRONG><a name="[c8]"></a>heap_steal</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, heap.o(i.heap_steal))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = heap_steal &rArr; heap_garbage_collect &rArr; stack_heap_id_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_garbage_collect
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_run
</UL>

<P><STRONG><a name="[c9]"></a>heap_unsteal</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, heap.o(i.heap_unsteal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = heap_unsteal &rArr; error &rArr; uart_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_run
</UL>

<P><STRONG><a name="[bd]"></a>inttostr</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, native_formatter.o(i.inttostr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inttostr
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_int
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_float
</UL>

<P><STRONG><a name="[e9]"></a>ir_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ir_rc5.o(i.ir_init))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_irreceiver_init
</UL>

<P><STRONG><a name="[eb]"></a>ir_read</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ir_rc5.o(i.ir_read))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_irreceiver_invoke
</UL>

<P><STRONG><a name="[5d]"></a>main</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nanovm.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = main &rArr; nvmfile_call_main &rArr; vm_run &rArr; native_invoke &rArr; native_math_invoke &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_call_main
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry8.o(.ARM.Collect$$$$00000009)
</UL>
<P><STRONG><a name="[ce]"></a>make_format_descr</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, native_formatter.o(i.make_format_descr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = make_format_descr &rArr; native_getchar &rArr; nvmfile_read08
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_formatter_invoke
</UL>

<P><STRONG><a name="[d0]"></a>maus_image_prepare</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mouse.o(i.maus_image_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = maus_image_prepare &rArr; maus_sens_write
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maus_sens_write
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_mouse_invoke
</UL>

<P><STRONG><a name="[d2]"></a>maus_image_read</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mouse.o(i.maus_image_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = maus_image_read &rArr; maus_sens_read
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maus_sens_read
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_mouse_invoke
</UL>

<P><STRONG><a name="[f6]"></a>maus_sens_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mouse.o(i.maus_sens_init))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_mouse_init
</UL>

<P><STRONG><a name="[d3]"></a>maus_sens_read</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mouse.o(i.maus_sens_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = maus_sens_read
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maus_sens_writeByte
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maus_sens_readByte
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maus_image_read
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_mouse_invoke
</UL>

<P><STRONG><a name="[d6]"></a>maus_sens_readByte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mouse.o(i.maus_sens_readByte))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maus_sens_read
</UL>

<P><STRONG><a name="[d1]"></a>maus_sens_write</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mouse.o(i.maus_sens_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = maus_sens_write
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maus_sens_writeByte
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maus_image_prepare
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_mouse_invoke
</UL>

<P><STRONG><a name="[d4]"></a>maus_sens_writeByte</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mouse.o(i.maus_sens_writeByte))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maus_sens_write
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maus_sens_read
</UL>

<P><STRONG><a name="[7e]"></a>motor_pwm_generate</STRONG> (Thumb, 266 bytes, Stack size 8 bytes, pwm.o(i.motor_pwm_generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = motor_pwm_generate
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[d9]"></a>motor_pwm_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pwm.o(i.motor_pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = motor_pwm_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_motor_init
</UL>

<P><STRONG><a name="[109]"></a>native_ctbot_bot_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, native_bot.o(i.native_ctbot_bot_init))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_init
</UL>

<P><STRONG><a name="[da]"></a>native_ctbot_bot_invoke</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, native_bot.o(i.native_ctbot_bot_invoke))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = native_ctbot_bot_invoke &rArr; stack_pop_int
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_pop_int
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_push
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_data
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_invoke
</UL>

<P><STRONG><a name="[de]"></a>native_ctbot_clock_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, native_clock.o(i.native_ctbot_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = native_ctbot_clock_init &rArr; TIM_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_init
</UL>

<P><STRONG><a name="[df]"></a>native_ctbot_clock_invoke</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, native_clock.o(i.native_ctbot_clock_invoke))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = native_ctbot_clock_invoke &rArr; stack_pop_int
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_pop_int
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_push
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_invoke
</UL>

<P><STRONG><a name="[e1]"></a>native_ctbot_display_invoke</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, native_display.o(i.native_ctbot_display_invoke))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = native_ctbot_display_invoke &rArr; stack_pop_addr &rArr; vm_get_addr &rArr; heap_get_addr &rArr; heap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_pop_addr
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_read08
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_pop
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_data
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_cursor
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_invoke
</UL>

<P><STRONG><a name="[10a]"></a>native_ctbot_distsensor_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, native_distancesensor.o(i.native_ctbot_distsensor_init))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_init
</UL>

<P><STRONG><a name="[e6]"></a>native_ctbot_distsensor_invoke</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, native_distancesensor.o(i.native_ctbot_distsensor_invoke))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = native_ctbot_distsensor_invoke &rArr; adc_read &rArr; ADC_Conversion_Data &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_pop_int
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_push
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_data
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_invoke
</UL>

<P><STRONG><a name="[10b]"></a>native_ctbot_edgedetector_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, native_edgedetector.o(i.native_ctbot_edgedetector_init))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_init
</UL>

<P><STRONG><a name="[e7]"></a>native_ctbot_edgedetector_invoke</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, native_edgedetector.o(i.native_ctbot_edgedetector_invoke))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = native_ctbot_edgedetector_invoke &rArr; adc_read &rArr; ADC_Conversion_Data &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_pop_int
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_push
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_data
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_invoke
</UL>

<P><STRONG><a name="[e8]"></a>native_ctbot_irreceiver_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, native_irreceiver.o(i.native_ctbot_irreceiver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = native_ctbot_irreceiver_init
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_init
</UL>

<P><STRONG><a name="[ea]"></a>native_ctbot_irreceiver_invoke</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, native_irreceiver.o(i.native_ctbot_irreceiver_invoke))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = native_ctbot_irreceiver_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_push
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_read
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_invoke
</UL>

<P><STRONG><a name="[10c]"></a>native_ctbot_ldrsensor_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, native_ldrsensor.o(i.native_ctbot_ldrsensor_init))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_init
</UL>

<P><STRONG><a name="[ec]"></a>native_ctbot_ldrsensor_invoke</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, native_ldrsensor.o(i.native_ctbot_ldrsensor_invoke))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = native_ctbot_ldrsensor_invoke &rArr; adc_read &rArr; ADC_Conversion_Data &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_push
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_invoke
</UL>

<P><STRONG><a name="[ed]"></a>native_ctbot_leds_invoke</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, native_leds.o(i.native_ctbot_leds_invoke))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = native_ctbot_leds_invoke &rArr; stack_pop_int
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_pop_int
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_push
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDOn
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_invoke
</UL>

<P><STRONG><a name="[10d]"></a>native_ctbot_lightbarrier_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, native_lightbarrier.o(i.native_ctbot_lightbarrier_init))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_init
</UL>

<P><STRONG><a name="[ef]"></a>native_ctbot_lightbarrier_invoke</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, native_lightbarrier.o(i.native_ctbot_lightbarrier_invoke))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = native_ctbot_lightbarrier_invoke &rArr; stack_pop_int
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_pop_int
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_push
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_data
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_invoke
</UL>

<P><STRONG><a name="[10e]"></a>native_ctbot_linedetector_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, native_linedetector.o(i.native_ctbot_linedetector_init))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_init
</UL>

<P><STRONG><a name="[f0]"></a>native_ctbot_linedetector_invoke</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, native_linedetector.o(i.native_ctbot_linedetector_invoke))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = native_ctbot_linedetector_invoke &rArr; adc_read &rArr; ADC_Conversion_Data &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_pop_int
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_push
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_data
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_invoke
</UL>

<P><STRONG><a name="[f1]"></a>native_ctbot_motor_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, native_motor.o(i.native_ctbot_motor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = native_ctbot_motor_init &rArr; motor_pwm_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_pwm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_init
</UL>

<P><STRONG><a name="[f2]"></a>native_ctbot_motor_invoke</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, native_motor.o(i.native_ctbot_motor_invoke))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = native_ctbot_motor_invoke &rArr; stack_pop_int
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_pop_int
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_push
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_speed
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_invoke
</UL>

<P><STRONG><a name="[f5]"></a>native_ctbot_mouse_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, native_mouse.o(i.native_ctbot_mouse_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = native_ctbot_mouse_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maus_sens_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_init
</UL>

<P><STRONG><a name="[f7]"></a>native_ctbot_mouse_invoke</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, native_mouse.o(i.native_ctbot_mouse_invoke))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = native_ctbot_mouse_invoke &rArr; maus_image_prepare &rArr; maus_sens_write
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_push
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maus_sens_write
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maus_sens_read
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maus_image_read
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maus_image_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_invoke
</UL>

<P><STRONG><a name="[f8]"></a>native_ctbot_servo_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, native_servo.o(i.native_ctbot_servo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = native_ctbot_servo_init &rArr; servo_pwm_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_pwm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_init
</UL>

<P><STRONG><a name="[fa]"></a>native_ctbot_servo_invoke</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, native_servo.o(i.native_ctbot_servo_invoke))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = native_ctbot_servo_invoke &rArr; stack_pop_int
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_pop_int
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_servo_position
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_release
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_invoke
</UL>

<P><STRONG><a name="[10f]"></a>native_ctbot_shuttersensor_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, native_shuttersensor.o(i.native_ctbot_shuttersensor_init))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_init
</UL>

<P><STRONG><a name="[fd]"></a>native_ctbot_shuttersensor_invoke</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, native_shuttersensor.o(i.native_ctbot_shuttersensor_invoke))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = native_ctbot_shuttersensor_invoke &rArr; stack_pop_int
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_pop_int
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_push
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_data
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_invoke
</UL>

<P><STRONG><a name="[fe]"></a>native_ctbot_wheelencoder_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, native_wheelencoder.o(i.native_ctbot_wheelencoder_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = native_ctbot_wheelencoder_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wheelencoder_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_init
</UL>

<P><STRONG><a name="[100]"></a>native_ctbot_wheelencoder_invoke</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, native_wheelencoder.o(i.native_ctbot_wheelencoder_invoke))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = native_ctbot_wheelencoder_invoke &rArr; stack_pop_int
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_pop_int
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_push
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_data
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_invoke
</UL>

<P><STRONG><a name="[101]"></a>native_formatter_invoke</STRONG> (Thumb, 322 bytes, Stack size 112 bytes, native_formatter.o(i.native_formatter_invoke))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = native_formatter_invoke &rArr; format_float &rArr; inttostr
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_push
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_pop
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_peek_int
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_peek_float
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_peek_addr
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_strncpy
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_format_descr
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_int
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_float
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_bool
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_get_addr
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_alloc
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_invoke
</UL>

<P><STRONG><a name="[106]"></a>native_ftoa</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, native_stdio.o(i.native_ftoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = native_ftoa &rArr; native_itoa
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_itoa
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_java_lang_stringbuffer_invoke
</UL>

<P><STRONG><a name="[cf]"></a>native_getchar</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nvmstring.o(i.native_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = native_getchar &rArr; nvmfile_read08
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_read08
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_format_descr
</UL>

<P><STRONG><a name="[ca]"></a>native_init</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, native_impl.o(i.native_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = native_init &rArr; uart_init &rArr; STM_EVAL_COMInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_data
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_bot_init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_wheelencoder_init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_shuttersensor_init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_servo_init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_mouse_init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_motor_init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_linedetector_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_lightbarrier_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_ldrsensor_init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_irreceiver_init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_edgedetector_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_distsensor_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_clock_init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[110]"></a>native_invoke</STRONG> (Thumb, 348 bytes, Stack size 8 bytes, native_impl.o(i.native_invoke))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = native_invoke &rArr; native_math_invoke &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_java_lang_stringbuffer_invoke
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_java_io_printstream_invoke
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_java_io_inputstream_invoke
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_math_invoke
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_formatter_invoke
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_bot_invoke
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_wheelencoder_invoke
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_shuttersensor_invoke
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_servo_invoke
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_mouse_invoke
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_motor_invoke
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_linedetector_invoke
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_lightbarrier_invoke
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_leds_invoke
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_ldrsensor_invoke
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_irreceiver_invoke
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_java_lang_object_invoke
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_edgedetector_invoke
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_distsensor_invoke
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_display_invoke
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_clock_invoke
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_run
</UL>

<P><STRONG><a name="[107]"></a>native_itoa</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, native_stdio.o(i.native_itoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = native_itoa
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_java_lang_stringbuffer_invoke
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_java_io_printstream_invoke
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ftoa
</UL>

<P><STRONG><a name="[113]"></a>native_java_io_inputstream_invoke</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, native_stdio.o(i.native_java_io_inputstream_invoke))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = native_java_io_inputstream_invoke &rArr; error &rArr; uart_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read_byte
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_push
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_pop
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_available
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_invoke
</UL>

<P><STRONG><a name="[112]"></a>native_java_io_printstream_invoke</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, native_stdio.o(i.native_java_io_printstream_invoke))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = native_java_io_printstream_invoke &rArr; stack_pop_addr &rArr; vm_get_addr &rArr; heap_get_addr &rArr; heap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_pop_addr
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_itoa
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_print
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_pop_int
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_pop
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_invoke
</UL>

<P><STRONG><a name="[111]"></a>native_java_lang_object_invoke</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, native_impl.o(i.native_java_lang_object_invoke))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = native_java_lang_object_invoke &rArr; error &rArr; uart_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_pop
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_invoke
</UL>

<P><STRONG><a name="[114]"></a>native_java_lang_stringbuffer_invoke</STRONG> (Thumb, 326 bytes, Stack size 56 bytes, native_stdio.o(i.native_java_lang_stringbuffer_invoke))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = native_java_lang_stringbuffer_invoke &rArr; heap_realloc &rArr; heap_garbage_collect &rArr; stack_heap_id_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_strlen
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_pop_addr
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_peek
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_strlen
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_strcat
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_itoa
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ftoa
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_push
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_pop
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_peek_int
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_peek_float
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_peek_addr
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_strcpy
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_realloc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_get_addr
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_alloc
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_invoke
</UL>

<P><STRONG><a name="[115]"></a>native_math_invoke</STRONG> (Thumb, 1454 bytes, Stack size 56 bytes, native_math.o(i.native_math_invoke))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = native_math_invoke &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_pop_int
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_pop_float
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_float2stack
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_push
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_invoke
</UL>

<P><STRONG><a name="[122]"></a>native_new</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, native_impl.o(i.native_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = native_new &rArr; heap_alloc &rArr; heap_garbage_collect &rArr; stack_heap_id_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_push
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_alloc
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_new
</UL>

<P><STRONG><a name="[11c]"></a>native_strcat</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nvmstring.o(i.native_strcat))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = native_strcat &rArr; native_strcpy &rArr; nvmfile_read08
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_java_lang_stringbuffer_invoke
</UL>

<P><STRONG><a name="[bb]"></a>native_strcpy</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nvmstring.o(i.native_strcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = native_strcpy &rArr; nvmfile_read08
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_read08
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_strcat
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_java_lang_stringbuffer_invoke
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_bool
</UL>

<P><STRONG><a name="[119]"></a>native_strlen</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nvmstring.o(i.native_strlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = native_strlen &rArr; nvmfile_read08
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_read08
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_java_lang_stringbuffer_invoke
</UL>

<P><STRONG><a name="[105]"></a>native_strncpy</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, nvmstring.o(i.native_strncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = native_strncpy &rArr; nvmfile_read08
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_read08
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_formatter_invoke
</UL>

<P><STRONG><a name="[120]"></a>nvm_float2stack</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, vm.o(i.nvm_float2stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nvm_float2stack
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_math_invoke
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_run
</UL>

<P><STRONG><a name="[134]"></a>nvm_stack2float</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, vm.o(i.nvm_stack2float))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nvm_stack2float
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_pop_float
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_peek_float
</UL>

<P><STRONG><a name="[135]"></a>nvm_stack2int</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, vm.o(i.nvm_stack2int))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_pop_int
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_peek_int
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_run
</UL>

<P><STRONG><a name="[cd]"></a>nvmfile_call_main</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, nvmfile.o(i.nvmfile_call_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = nvmfile_call_main &rArr; vm_run &rArr; native_invoke &rArr; native_math_invoke &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_read08
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_run
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_read16
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_get_method_hdr
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[126]"></a>nvmfile_get_addr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nvmfile.o(i.nvmfile_get_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvmfile_get_addr &rArr; nvmfile_read16
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_read16
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_get_addr
</UL>

<P><STRONG><a name="[127]"></a>nvmfile_get_class_fields</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, nvmfile.o(i.nvmfile_get_class_fields))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nvmfile_get_class_fields &rArr; nvmfile_read08
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_read08
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_new
</UL>

<P><STRONG><a name="[128]"></a>nvmfile_get_constant</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, nvmfile.o(i.nvmfile_get_constant))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nvmfile_get_constant &rArr; nvmfile_read16
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_read32
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_read16
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_run
</UL>

<P><STRONG><a name="[12a]"></a>nvmfile_get_method_by_class_and_id</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nvmfile.o(i.nvmfile_get_method_by_class_and_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nvmfile_get_method_by_class_and_id &rArr; nvmfile_get_method_by_fixed_class_and_id &rArr; nvmfile_read
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_read08
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_get_method_by_fixed_class_and_id
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_run
</UL>

<P><STRONG><a name="[12b]"></a>nvmfile_get_method_by_fixed_class_and_id</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, nvmfile.o(i.nvmfile_get_method_by_fixed_class_and_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nvmfile_get_method_by_fixed_class_and_id &rArr; nvmfile_read
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_read08
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_read
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_get_method_hdr
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_get_method_by_class_and_id
</UL>

<P><STRONG><a name="[123]"></a>nvmfile_get_method_hdr</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nvmfile.o(i.nvmfile_get_method_hdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvmfile_get_method_hdr &rArr; nvmfile_read16
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_read16
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_call_main
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_run
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_get_method_by_fixed_class_and_id
</UL>

<P><STRONG><a name="[12d]"></a>nvmfile_get_static_fields</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, nvmfile.o(i.nvmfile_get_static_fields))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nvmfile_get_static_fields &rArr; nvmfile_read08
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_read08
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_init
</UL>

<P><STRONG><a name="[cb]"></a>nvmfile_init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, nvmfile.o(i.nvmfile_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nvmfile_init &rArr; nvmfile_read08
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_read08
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_read32
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_read16
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12c]"></a>nvmfile_read</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nvmfile.o(i.nvmfile_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvmfile_read
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_run
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_get_method_by_fixed_class_and_id
</UL>

<P><STRONG><a name="[e5]"></a>nvmfile_read08</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nvmfile.o(i.nvmfile_read08))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nvmfile_read08
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_strlen
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_print
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_strncpy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_strcpy
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_getchar
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_call_main
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_run
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_get_static_fields
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_get_method_by_fixed_class_and_id
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_get_method_by_class_and_id
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_get_class_fields
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_display_invoke
</UL>

<P><STRONG><a name="[125]"></a>nvmfile_read16</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nvmfile.o(i.nvmfile_read16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nvmfile_read16
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_call_main
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_get_method_hdr
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_get_constant
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_get_addr
</UL>

<P><STRONG><a name="[129]"></a>nvmfile_read32</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nvmfile.o(i.nvmfile_read32))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_get_constant
</UL>

<P><STRONG><a name="[f4]"></a>pid_reset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pid.o(i.pid_reset))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_motor_invoke
</UL>

<P><STRONG><a name="[7f]"></a>servo_pwm_generate</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, pwm.o(i.servo_pwm_generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = servo_pwm_generate
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[f9]"></a>servo_pwm_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, pwm.o(i.servo_pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = servo_pwm_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_servo_init
</UL>

<P><STRONG><a name="[fc]"></a>servo_release</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pwm.o(i.servo_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = servo_release
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_servo_invoke
</UL>

<P><STRONG><a name="[f3]"></a>set_motor_speed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pwm.o(i.set_motor_speed))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_motor_invoke
</UL>

<P><STRONG><a name="[fb]"></a>set_servo_position</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pwm.o(i.set_servo_position))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_servo_invoke
</UL>

<P><STRONG><a name="[130]"></a>shift_clear</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, shift.o(i.shift_clear))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_data
</UL>

<P><STRONG><a name="[dd]"></a>shift_data</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, shift.o(i.shift_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = shift_data
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_data_out
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_bot_invoke
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_wheelencoder_invoke
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_shuttersensor_invoke
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_linedetector_invoke
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_lightbarrier_invoke
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_edgedetector_invoke
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_distsensor_invoke
</UL>

<P><STRONG><a name="[12f]"></a>shift_data_out</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, shift.o(i.shift_data_out))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_data
</UL>

<P><STRONG><a name="[88]"></a>sqrt</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[13d]"></a>stack_add_sp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stack.o(i.stack_add_sp))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_run
</UL>

<P><STRONG><a name="[137]"></a>stack_get_sp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stack.o(i.stack_get_sp))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_save_base
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_run
</UL>

<P><STRONG><a name="[13f]"></a>stack_get_static</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stack.o(i.stack_get_static))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_run
</UL>

<P><STRONG><a name="[c2]"></a>stack_heap_id_in_use</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stack.o(i.stack_heap_id_in_use))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stack_heap_id_in_use
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_garbage_collect
</UL>

<P><STRONG><a name="[131]"></a>stack_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stack.o(i.stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = stack_init &rArr; heap_steal &rArr; heap_garbage_collect &rArr; stack_heap_id_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_steal
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_get_base
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_init
</UL>

<P><STRONG><a name="[13e]"></a>stack_is_empty</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stack.o(i.stack_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_run
</UL>

<P><STRONG><a name="[11a]"></a>stack_peek</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stack.o(i.stack_peek))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_java_lang_stringbuffer_invoke
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_run
</UL>

<P><STRONG><a name="[102]"></a>stack_peek_addr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stack.o(i.stack_peek_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stack_peek_addr &rArr; vm_get_addr &rArr; heap_get_addr &rArr; heap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_get_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_java_lang_stringbuffer_invoke
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_formatter_invoke
</UL>

<P><STRONG><a name="[104]"></a>stack_peek_float</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stack.o(i.stack_peek_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stack_peek_float &rArr; nvm_stack2float
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_stack2float
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_java_lang_stringbuffer_invoke
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_formatter_invoke
</UL>

<P><STRONG><a name="[103]"></a>stack_peek_int</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stack.o(i.stack_peek_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stack_peek_int
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_stack2int
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_java_lang_stringbuffer_invoke
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_formatter_invoke
</UL>

<P><STRONG><a name="[e2]"></a>stack_pop</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stack.o(i.stack_pop))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_java_lang_stringbuffer_invoke
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_java_io_printstream_invoke
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_java_io_inputstream_invoke
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_formatter_invoke
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_run
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_java_lang_object_invoke
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_display_invoke
</UL>

<P><STRONG><a name="[e3]"></a>stack_pop_addr</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stack.o(i.stack_pop_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stack_pop_addr &rArr; vm_get_addr &rArr; heap_get_addr &rArr; heap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_get_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_java_lang_stringbuffer_invoke
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_java_io_printstream_invoke
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_display_invoke
</UL>

<P><STRONG><a name="[11d]"></a>stack_pop_float</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stack.o(i.stack_pop_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stack_pop_float &rArr; nvm_stack2float
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_stack2float
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_math_invoke
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_run
</UL>

<P><STRONG><a name="[dc]"></a>stack_pop_int</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stack.o(i.stack_pop_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stack_pop_int
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_stack2int
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_java_io_printstream_invoke
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_math_invoke
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_run
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_bot_invoke
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_wheelencoder_invoke
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_shuttersensor_invoke
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_servo_invoke
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_motor_invoke
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_linedetector_invoke
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_lightbarrier_invoke
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_leds_invoke
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_edgedetector_invoke
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_distsensor_invoke
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_clock_invoke
</UL>

<P><STRONG><a name="[db]"></a>stack_push</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stack.o(i.stack_push))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_java_lang_stringbuffer_invoke
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_java_io_inputstream_invoke
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_math_invoke
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_formatter_invoke
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_new
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_new
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_run
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_bot_invoke
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_wheelencoder_invoke
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_shuttersensor_invoke
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_mouse_invoke
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_motor_invoke
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_linedetector_invoke
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_lightbarrier_invoke
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_leds_invoke
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_ldrsensor_invoke
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_irreceiver_invoke
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_edgedetector_invoke
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_distsensor_invoke
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_clock_invoke
</UL>

<P><STRONG><a name="[136]"></a>stack_save_base</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, stack.o(i.stack_save_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = stack_save_base
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_get_sp
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_run
</UL>

<P><STRONG><a name="[140]"></a>stack_set_static</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stack.o(i.stack_set_static))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_run
</UL>

<P><STRONG><a name="[116]"></a>uart_available</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart.o(i.uart_available))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_java_io_inputstream_invoke
</UL>

<P><STRONG><a name="[108]"></a>uart_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, uart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = uart_init &rArr; STM_EVAL_COMInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_COMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_init
</UL>

<P><STRONG><a name="[b9]"></a>uart_putc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, uart.o(i.uart_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_java_io_printstream_invoke
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_print
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>

<P><STRONG><a name="[117]"></a>uart_read_byte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart.o(i.uart_read_byte))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_java_io_inputstream_invoke
</UL>

<P><STRONG><a name="[c7]"></a>utils_memcpy</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, utils.o(i.utils_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = utils_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_realloc
</UL>

<P><STRONG><a name="[11b]"></a>utils_strlen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, utils.o(i.utils_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_java_lang_stringbuffer_invoke
</UL>

<P><STRONG><a name="[133]"></a>vm_get_addr</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, vm.o(i.vm_get_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vm_get_addr &rArr; heap_get_addr &rArr; heap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_get_addr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_get_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_pop_addr
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_peek_addr
</UL>

<P><STRONG><a name="[cc]"></a>vm_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, vm.o(i.vm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vm_init &rArr; stack_init &rArr; heap_steal &rArr; heap_garbage_collect &rArr; stack_heap_id_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_push
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_get_static_fields
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13c]"></a>vm_new</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, vm.o(i.vm_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vm_new &rArr; native_new &rArr; heap_alloc &rArr; heap_garbage_collect &rArr; stack_heap_id_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_push
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_get_addr
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_alloc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_new
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_get_class_fields
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_run
</UL>

<P><STRONG><a name="[124]"></a>vm_run</STRONG> (Thumb, 2656 bytes, Stack size 72 bytes, vm.o(i.vm_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = vm_run &rArr; native_invoke &rArr; native_math_invoke &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_peek
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_read08
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_pop_int
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_pop_float
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_float2stack
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_push
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_pop
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_unsteal
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_steal
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_get_addr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;array_new
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;array_length
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;array_iastore
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;array_iaload
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;array_fastore
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;array_faload
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;array_bastore
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;array_baload
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_invoke
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_new
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_stack2int
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_set_static
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_save_base
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_is_empty
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_get_static
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_get_sp
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_add_sp
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_read
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_get_method_hdr
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_get_method_by_class_and_id
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_get_constant
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_call_main
</UL>

<P><STRONG><a name="[ff]"></a>wheelencoder_init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, wheelencoder.o(i.wheelencoder_init))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_ctbot_wheelencoder_init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[80]"></a>SetSysClock</STRONG> (Thumb, 198 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[118]"></a>native_print</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, native_stdio.o(i.native_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = native_print &rArr; nvmfile_read08
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmfile_read08
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_java_io_printstream_invoke
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
